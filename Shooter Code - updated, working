package org.usfirst.frc.team3352.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.Joystick;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.smartdashboard.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot implements PIDOutput 
{
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();
	
	CANTalon motor = new CANTalon(5);
	Joystick joy1 = new Joystick(1);	
	StringBuilder _sb = new StringBuilder();
	int _loops = 0;
	double targetSpeed = 0;
	
    AHRS ahrs;
    RobotDrive myRobot;
    Joystick driveStick;
    PIDController turnController;
    double rotateToAngleRate;
    double angle = 0;
    boolean buttonPressed = true;
    double deadZone = 0.10;
    
    static final double kP = 0.015;
    static final double kI = 0.00;
    static final double kD = 0.00;
    static final double kF = 0.00;
    
    static final double kToleranceDegrees = 2.0f;

    // Channels for the wheels
    CANTalon frontLeftChannel = new CANTalon(1);
    CANTalon rearLeftChannel = new CANTalon(2);
    CANTalon frontRightChannel = new CANTalon(3);
    CANTalon rearRightChannel = new CANTalon(4);

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
		
		motor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		motor.configEncoderCodesPerRev(16);
		motor.setProfile(0);
		motor.setF(3);
		motor.setP(5); /*25*/
		motor.setI(0.005);/*.025*/
		motor.setD(0);
	    motor.configNominalOutputVoltage(+0.0f, -0.0f);
	    motor.configPeakOutputVoltage(+12.0f, -12.0f);
	    
    	frontLeftChannel.setInverted(true);
    	rearLeftChannel.setInverted(true);
        myRobot = new RobotDrive(frontLeftChannel, rearLeftChannel,
        		frontRightChannel, rearRightChannel);
        myRobot.setExpiration(0.1);
        driveStick = new Joystick(0);
        
        try 
        {
            ahrs = new AHRS(SPI.Port.kMXP); 
        } 
        catch (RuntimeException ex ) 
        {
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
        turnController = new PIDController(kP, kI, kD, kF, ahrs, this);
        turnController.setInputRange(-180.0f,  180.0f);
        turnController.setOutputRange(-1.0, 1.0);
        turnController.setAbsoluteTolerance(kToleranceDegrees);
        turnController.setContinuous(true);
        
        LiveWindow.addActuator("DriveSystem", "RotateController", turnController);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		switch (autoSelected) {
		case customAuto:
			// Put custom auto code here
			break;
		case defaultAuto:
		default:
			// Put default auto code here
			break;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		/* get gamepad axis */
        double leftYstick = joy1.getRawAxis(0);
    	double motorOutput = motor.getOutputVoltage() / motor.getBusVoltage();
    	/* prepare line to print */
		_sb.append("\tout:");
		_sb.append(motorOutput);
        _sb.append("\tspd:");
        _sb.append(motor.getSpeed() );
        
		if(joy1.getRawButton(1)){
        	/* Speed mode - A */
        	targetSpeed = leftYstick * 3000.0; /* 3000 to make full speed possible */
        	motor.changeControlMode(TalonControlMode.Speed);
        	motor.set(targetSpeed); /* 1500 RPM in either direction */
        } 
        else if(joy1.getRawButton(2)){
        	/* Percent voltage mode */
        	motor.changeControlMode(TalonControlMode.PercentVbus);
        	motor.set(leftYstick);
        }
        
        _sb.append("\terr:");
        _sb.append(motor.getClosedLoopError());
        _sb.append("\ttrg:");
        _sb.append(targetSpeed);
        SmartDashboard.putNumber("Target Speed",targetSpeed);
        SmartDashboard.putNumber("Talon Command", motorOutput);
		SmartDashboard.putNumber("Actual Speed", motor.getSpeed());
		SmartDashboard.putNumber("Error", motor.getClosedLoopError());

        if(++_loops >= 10) {
        	_loops = 0;
        	System.out.println(_sb.toString());
        }
        _sb.setLength(0);
    	
    	SmartDashboard.putNumber("Displcement_X", ahrs.getDisplacementX());
    	SmartDashboard.putNumber("Displacement_Y", ahrs.getDisplacementY());
    	
    	SmartDashboard.putNumber("angle", ahrs.getAngle());
    
        boolean rotateToAngle = false;
       
        if ( driveStick.getRawButton(1)) 
        {
            ahrs.reset();
        }
        
        if ( driveStick.getRawButton(2)) 
        {
            turnController.setSetpoint(0.0f);
            rotateToAngle = true;
        } 
        else if ( driveStick.getRawButton(3)) 
        {
            turnController.setSetpoint(90.0f);
            rotateToAngle = true;
        } 
        else if ( driveStick.getRawButton(4)) 
        {
            turnController.setSetpoint(179.9f);
            rotateToAngle = true;
        } 
        else if ( driveStick.getRawButton(5)) 
        {
            turnController.setSetpoint(-90.0f);
            rotateToAngle = true;
        }
        
        double currentRotationRate;
        
        if (rotateToAngle) 
        {
            turnController.enable();
            currentRotationRate = rotateToAngleRate;
            buttonPressed = true;
        }
        
        else if (driveStick.getRawButton(6)) 
        {
        	
        	if(buttonPressed)
        	{
        		angle = ahrs.getAngle();	
            	while (angle > 360 || angle < 0)
            	{
            		if (angle > 360)
            		{
            			angle -= 360;
            		}
            		
            		else
            		{
            			angle += 360;
            			
            		}
            		
        		
            	}
            	buttonPressed = false;
        	
        	}
        	SmartDashboard.putNumber("setpoint", angle);
        	
            turnController.enable();
            currentRotationRate = rotateToAngleRate;
            

        }
        
        else 
        {
            turnController.disable();
           
            double rotateX = driveStick.getRawAxis(4);
            double magnitude = Math.abs(rotateX);
            
            if (magnitude < deadZone)
            {
            	currentRotationRate = 0;
            }
            
            else
            {
            	currentRotationRate = driveStick.getRawAxis(4);
            }
            		                
            buttonPressed = true;
        }

        
        try 
        {
            double joyX = driveStick.getRawAxis(1);
            double joyY = driveStick.getRawAxis(0);
            double magnitudeX = Math.abs(joyX);
            double magnitudeY = Math.abs(joyY);         
            
            if(magnitudeX < deadZone)
            {
            	joyX = 0;
            }
            
            if(magnitudeY < deadZone)
            {
            	joyY = 0;
            }
            /* Use the joystick X axis for lateral movement,          */
            /* Y axis for forward movement, and the current           */
            /* calculated rotation rate (or joystick Z axis),         */
            /* depending upon whether "rotate to angle" is active.    */
            //myRobot.mecanumDrive_Cartesian(driveStick.getRawAxis(1), -driveStick.getRawAxis(0), currentRotationRate, ahrs.getAngle()-90.0);
        	 myRobot.mecanumDrive_Cartesian(joyX, -joyY, currentRotationRate, ahrs.getAngle()-90.0);
        } 
        
        catch( RuntimeException ex ) 
        {
            DriverStation.reportError("Error communicating with drive system:  " + ex.getMessage(), true);
        }
        
        Timer.delay(0.005);		// wait for a motor update time
    }
		


	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testInit()
	{
/*		pid.enable();
		pid.setSetpoint(.1);
	*/}
	@Override
	public void testPeriodic() {
		/* get gamepad axis */
        double leftYstick = joy1.getRawAxis(0);
    	double motorOutput = motor.getOutputVoltage() / motor.getBusVoltage();
    	/* prepare line to print */
		_sb.append("\tout:");
		_sb.append(motorOutput);
        _sb.append("\tspd:");
        _sb.append(motor.getSpeed() );
        
        if(joy1.getRawButton(1)){
        	/* Speed mode */
        	double targetSpeed;
    		targetSpeed = SmartDashboard.getNumber("SetPoint", 0);
    		

/*        	double targetSpeed = leftYstick * 2000.0; *//* 3000 RPM in either direction */
        	motor.changeControlMode(TalonControlMode.Speed);
        	motor.set(targetSpeed); /* 1500 RPM in either direction */

        	/* append more signals to print when in speed mode. */
            _sb.append("\terr:");
            _sb.append(motor.getClosedLoopError());
            _sb.append("\ttrg:");
            _sb.append(targetSpeed);
    		SmartDashboard.putNumber("Target Speed",targetSpeed);
        } else {
        	/* Percent voltage mode */
        	motor.changeControlMode(TalonControlMode.PercentVbus);
        	motor.set(leftYstick);
        }
		SmartDashboard.putNumber("Command", motorOutput);
		SmartDashboard.putNumber("Speed", motor.getSpeed());
		SmartDashboard.putNumber("Error", motor.getClosedLoopError());

        if(++_loops >= 10) {
        	_loops = 0;
        	System.out.println(_sb.toString());
        }
        _sb.setLength(0);
	
	}
    public void test() 
    {
    	LiveWindow.run();
    }

    @Override
    /* This function is invoked periodically by the PID Controller, */
    /* based upon navX MXP yaw angle input and PID Coefficients.    */
    public void pidWrite(double output) 
    {
        rotateToAngleRate = output;
    }	
}
